{"version":3,"sources":["webpack:///src/app/pages/chats/chats-routing.module.ts","webpack:///src/app/pages/chats/chats.module.ts","webpack:///src/app/pages/chats/components/all-chats/all-chats.component.ts","webpack:///src/app/pages/chats/components/all-chats/all-chats.component.html","webpack:///src/app/pages/chats/components/chat-details/chat-details.component.ts","webpack:///src/app/pages/chats/components/chat-details/chat-details.component.html","webpack:///src/app/pages/chats/services/chats.service.ts","webpack:///src/app/pages/chats/store/chat.actions.ts","webpack:///src/app/pages/chats/store/chat.effects.ts","webpack:///src/app/pages/chats/store/chat.reducer.ts","webpack:///src/app/pages/chats/store/chat.selector.ts"],"names":["routes","path","component","ChatsRoutingModule","forChild","imports","exports","ChatsModule","forFeature","declarations","providers","AllChatsComponent","store","chatService","toaster","chatsList","dispatch","getAllChats","pipe","subscribe","response","console","log","chats","config","itemsPerPage","currentPage","totalItems","length","error","msg","event","carId","confirm","name","filter","res","username","toLocaleLowerCase","match","selector","templateUrl","styleUrls","ChatDetailsComponent","formBuilder","activatedRoute","translate","render","document","destroy$","checkMessageBodyScrollHeight","messageForm","group","message","required","roomId","params","getMessages","id","get","setValue","getMessagesObservable","messages","docs","forEach","e","i","push","data","sort","a","b","sentDate","localeCompare","secondSender","firstSender","sender","elementExists","setInterval","messageBody","querySelector","scrollHeight","scrollTop","clearInterval","next","complete","valid","formMessages","getRawValue","sendMessage","reset","onSubmit","Document","ChatsService","httpClient","tokenService","datePipe","firestore","chatsAPI","httpOptions","errorHandler","chatRoomId","clientId","chatMsg","transform","Date","toString","collection","doc","add","providedIn","loadChats","loadChatsSuccess","loadChatsFailure","ChatEffects","actions$","loadChats$","chatsFeatureKey","adapter","initialState","getInitialState","Data","undefined","reducer","state","action","setAll","getSelectors","selectIds","selectEntities","selectAll","selectTotal","chatFeatureState","chatsSelector"],"mappings":"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","file":"chats-chats-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AllChatsComponent} from './components/all-chats/all-chats.component';\nimport {ChatDetailsComponent} from './components/chat-details/chat-details.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllChatsComponent },\n  { path: ':id', component: ChatDetailsComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ChatsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport {ThemeModule} from '../../@theme/theme.module';\n\nimport { ChatsRoutingModule } from './chats-routing.module';\nimport { AllChatsComponent } from './components/all-chats/all-chats.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromChat from './store/chat.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ChatEffects } from './store/chat.effects';\nimport { ChatDetailsComponent } from './components/chat-details/chat-details.component';\nimport {DatePipe} from '@angular/common';\nimport {ChatsService} from './services/chats.service';\n\n\n@NgModule({\n  declarations: [AllChatsComponent, ChatDetailsComponent],\n  imports: [\n    ThemeModule,\n    ChatsRoutingModule,\n    StoreModule.forFeature(fromChat.chatsFeatureKey, fromChat.reducer),\n    EffectsModule.forFeature([ChatEffects])\n  ],\n  providers: [ChatsService, DatePipe]\n})\nexport class ChatsModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Chat} from '../../model/chat.model';\nimport {select, Store} from '@ngrx/store';\nimport {ChatState} from '../../store/chat.reducer';\nimport * as chatAction from '../../store/chat.actions';\nimport {chatsSelector} from '../../store/chat.selector';\nimport * as carAction from '../../../cars/store/car.actions';\nimport {ToastrService} from 'ngx-toastr';\nimport {ChatsService} from '../../services/chats.service';\n\n@Component({\n  selector: 'app-all-chats',\n  templateUrl: './all-chats.component.html',\n  styleUrls: ['./all-chats.component.scss']\n})\nexport class AllChatsComponent implements OnInit {\n  chats: Chat[];\n  chatsList: Chat[] = [];\n  config: any;\n  name: any;\n\n  constructor(private store: Store<ChatState>,\n              private chatService: ChatsService,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(chatAction.loadChats());\n    // Get All Chats\n    this.getAllChats();\n  }\n\n  getAllChats() {\n    this.store.pipe(select(chatsSelector)).subscribe(\n      response => {\n        console.log('chats: ', response);\n        this.chats = response;\n        this.chatsList = response;\n      }\n    );\n    this.config = {\n      itemsPerPage: 5,\n      currentPage: 1,\n      totalItems: this.chatsList.length\n    };\n  }\n\n  // Handle Response Error\n  handleError(error) {\n    console.log(error);\n    if (error.error.error) {\n      this.toaster.error(error.error.error);\n    } else if (error.error.msg) {\n      this.toaster.error(error.error.msg);\n    }\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  // Delete The Cars\n  delete(carId: number) {\n    if (confirm('Are You Sure You Want To Delete This Chat')) {\n      // this.isDeleted = true;\n      // this.store.dispatch(carAction.deleteCar({id: carId}));\n      // this.toaster.success('Car Successfully Deleted');\n      // fetch all product after delete Car\n      this.getAllChats();\n    } else {\n      return false;\n    }\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.chatsList = [...this.chats];\n    } else {\n      this.chatsList = [];\n      this.chatsList = this.chats.filter(res => {\n        if (res.username) {\n          const username = res.username.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (username) {\n            // display the Name Column\n            return username;\n          }\n        }\n      });\n    }\n  }\n}\n","<div class=\"chats\" *ngIf=\"chats.length != 0\">\r\n   <div class=\"container-fluid\">\r\n    <div class=\"card my-5\">\r\n      <div class=\"card-header\">\r\n        <h1 class=\"text-center details-title my-4\">{{'manage-chats-page' | translate}}</h1>\r\n      </div>\r\n      <div class=\"card-body p-2\">\r\n        <div class=\"row\">\r\n          <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\r\n            <div class=\"form-group mb-0 mt-3\">\r\n              <input\r\n                id=\"exampleFormControlInput2\"\r\n                [(ngModel)]=\"name\"\r\n                (keyup)=\"applyFilter()\"\r\n                type=\"text\"\r\n                placeholder=\"{{'chat-search-input' | translate}}\"\r\n                title=\"{{'chat-search-input' | translate}}\"\r\n                class=\"form-control form-control-underlined border-primary search-input\">\r\n            </div>\r\n          </div>\r\n          <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\r\n            <!-- <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/cars/add\">\r\n              <i class=\"fa fa-plus\"></i>\r\n              {{'add-new-car' | translate}}\r\n            </a> -->\r\n          </div>\r\n        </div>\r\n        <div class=\"messages-body my-3 pt-3 p-2\">\r\n          <div class=\"comment-block\" *ngFor=\"let chat of chatsList | paginate: config\">\r\n            <a routerLink=\"{{chat?.roomID}}\">\r\n              <div class=\"row\">\r\n                <div class=\"col-2 col-lg-1 text-center pr-0 align-self-center\">\r\n                  <div class=\"user-img\">\r\n                    <img class=\"res-image\"\r\n                        src=\"{{chat?.image ? chat?.image :  '../../../../../assets/default-avatar.jpg'}}\"\r\n                        alt=\"\"/>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-10 col-lg-11 mt-2 mt-sm-0\">\r\n                  <div class=\"comment-body py-2 px-3\">\r\n                    <div class=\"time\">\r\n                      <span class=\"pb-1\">{{chat?.username}} {{chat?.startAt != null ? '( ' + (chat?.startAt.timestamp * 1000 | date: 'medium') + ' )' : ''}}</span>\r\n                    </div>\r\n    <!--                <p class=\"comment m-0 mt-2\">-->\r\n    <!--                  {{comment.body}}-->\r\n    <!--                </p>-->\r\n                  </div>\r\n                </div>\r\n              </div><!--.row-->\r\n            </a>\r\n          </div><!--.comment-block-->\r\n        </div><!--.messages-body-->\r\n      </div><!--.card-body-->\r\n      <div class=\"card-footer\">\r\n        <pagination-controls class=\"my-pagination\"\r\n                             (pageChange)=\"pageChanged($event)\"\r\n                             autoHide=\"true\"\r\n                             maxSize=\"5\"\r\n                             responsive=\"true\"\r\n                             previousLabel=\"{{'prev' | translate}}\"\r\n                             nextLabel=\"{{'next' | translate}}\"\r\n                             screenReaderPaginationLabel=\"Pagination\"\r\n                             screenReaderPageLabel=\"page\"\r\n                             screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\r\n        </pagination-controls>\r\n      </div><!--.card-footer-->\r\n    </div><!--.card-->\r\n   </div>\r\n</div><!--.chats-->\r\n<div *ngIf=\"chats.length === 0\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n","import {Component, Inject, OnDestroy, OnInit, Renderer2} from '@angular/core';\r\nimport { Action, DocumentSnapshot } from '@angular/fire/firestore';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport {interval, Observable, pipe, Subject} from 'rxjs';\r\nimport {takeUntil, takeWhile, timeInterval} from 'rxjs/operators';\r\nimport {MessageModel} from '../../model/message-model';\r\nimport {ChatsService} from '../../services/chats.service';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {TranslateService} from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-chat-details',\r\n  templateUrl: './chat-details.component.html',\r\n  styleUrls: ['./chat-details.component.scss']\r\n})\r\nexport class ChatDetailsComponent implements OnInit, OnDestroy {\r\n  private destroy$: Subject<void> = new Subject();\r\n  messageForm: FormGroup;\r\n  messages: MessageModel[];\r\n  firstSender: any;\r\n  secondSender: any;\r\n\r\n\r\n  constructor(private chatService: ChatsService,\r\n              private formBuilder: FormBuilder,\r\n              private toaster: ToastrService,\r\n              private activatedRoute: ActivatedRoute,\r\n              public translate: TranslateService,\r\n              private render: Renderer2,\r\n              @Inject(DOCUMENT) private document: Document) {}\r\n\r\n  ngOnInit(): void {\r\n    this.checkMessageBodyScrollHeight();\r\n    // Fetch Form Data\r\n    this.messageForm = this.formBuilder.group({\r\n      message: ['', Validators.required],\r\n      roomId: ['']\r\n    });\r\n\r\n    this.activatedRoute.params.subscribe(\r\n      params => {\r\n        console.log(params);\r\n        this.getMessages(params.id);\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  getMessages(roomId: string) {\r\n    // Check Room Id exists\r\n    if (roomId) {\r\n      this.messageForm.get('roomId').setValue(roomId);\r\n      this.chatService.getMessagesObservable(roomId)\r\n      .pipe(\r\n        takeUntil(this.destroy$))\r\n      .subscribe(\r\n        (messages) => {\r\n          // console.log('messages: ', messages);\r\n          this.messages = [];\r\n          messages.docs.forEach((e, i) => {\r\n            // Get ALl Message by e.data()\r\n            this.messages.push(e.data());\r\n          });\r\n          // Sort Messages Depending On Message Date\r\n          this.messages.sort((a, b) => a.sentDate.localeCompare(b.sentDate));\r\n          // console.log('after sort Messages : ', this.messages);\r\n          // Check if the messages is not empty\r\n          if (this.messages.length > 0) {\r\n            this.secondSender = 'admin';\r\n            for (let i = 0; i < this.messages.length - 1; i++) {\r\n              // check if firstSender And secondSender still empty\r\n              if (this.firstSender == null) {\r\n                // Check if the this sender equal to next sender\r\n                if (this.messages[i].sender != this.secondSender) {\r\n                  this.firstSender = this.messages[i].sender;\r\n                }\r\n              }\r\n              /* Second Way If firstSender And SecondSender is Undefined\r\n              if (this.firstSender == null || this.secondSender == null) {\r\n                // Check if the this sender equal to next sender\r\n                if (this.messages[i].sender == this.messages[i + 1].sender) {\r\n                  this.firstSender = this.messages[i].sender;\r\n                } else {\r\n                  // check if this sender not equal to The stored firstSender\r\n                  if (this.messages[i].sender != this.firstSender) {\r\n                    this.secondSender = this.messages[i].sender;\r\n                  } else {\r\n                    this.secondSender = this.messages[i + 1].sender;\r\n                  }\r\n                }\r\n              }*/\r\n            }}\r\n        }, error => console.log('Error ', error),\r\n        () => {\r\n          // Sort Messages Depending On Message Date\r\n          this.messages.sort((a, b) => a.sentDate.localeCompare(b.sentDate));\r\n          console.log('after sort Messages : ', this.messages);\r\n          // Check if the messages is not empty\r\n          if (this.messages.length > 0) {\r\n            this.secondSender = 'admin';\r\n            for (let i = 0; i < this.messages.length - 1; i++) {\r\n              // check if firstSender And secondSender still empty\r\n              if (this.firstSender == null) {\r\n                // Check if the this sender equal to next sender\r\n                if (this.messages[i].sender != this.secondSender) {\r\n                  this.firstSender = this.messages[i].sender;\r\n                }\r\n              }\r\n              /* Second Way If firstSender And SecondSender is Undefined\r\n              if (this.firstSender == null || this.secondSender == null) {\r\n                // Check if the this sender equal to next sender\r\n                if (this.messages[i].sender == this.messages[i + 1].sender) {\r\n                  this.firstSender = this.messages[i].sender;\r\n                } else {\r\n                  // check if this sender not equal to The stored firstSender\r\n                  if (this.messages[i].sender != this.firstSender) {\r\n                    this.secondSender = this.messages[i].sender;\r\n                  } else {\r\n                    this.secondSender = this.messages[i + 1].sender;\r\n                  }\r\n                }\r\n              }*/\r\n            }\r\n            console.log('firstSender : ', this.firstSender);\r\n            console.log('secondSender : ', this.secondSender);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  // Scroll to latest message when messages display\r\n  checkMessageBodyScrollHeight() {\r\n    const elementExists = setInterval(() => {\r\n      const messageBody = this.document.querySelector('.messages-body');\r\n      if (messageBody.scrollHeight > 40) {\r\n        messageBody.scrollTop = messageBody.scrollHeight;\r\n        clearInterval(elementExists);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  checkMessageDirectionForRtl() {\r\n    if (true) {\r\n      const elementExists = setInterval(() => {\r\n        const messageBody = this.document.querySelector('.messages-body');\r\n        if (messageBody.scrollHeight > 40) {\r\n          messageBody.scrollTop = messageBody.scrollHeight;\r\n          clearInterval(elementExists);\r\n        }\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (!this.messageForm.valid) {\r\n      this.toaster.error('Error : Can\\'t Send An Empty Message');\r\n    } else {\r\n      const formMessages = this.messageForm.getRawValue();\r\n      console.log(formMessages);\r\n      if (formMessages.roomId) {\r\n        this.chatService.sendMessage(formMessages.roomId, formMessages.message, 'admin');\r\n      } else {\r\n        this.toaster.error('Error, Please Try Later');\r\n      }\r\n      this.messageForm.reset();\r\n      this.getMessages(formMessages.roomId);\r\n    }\r\n  }\r\n}\r\n","<div class=\"messages\">\r\n    <div class=\"container\">\r\n        <h1 class=\"text-center my-4\">{{'chat-room' | translate}}</h1>\r\n        <div class=\"col-12 col-md-8 mx-auto border mt-4\">\r\n            <div class=\"messages-body my-3 pt-3 p-2\">\r\n                <ng-container *ngFor=\"let message of messages\">\r\n                  <ng-container *ngIf=\"message.sender == firstSender\">\r\n                    <p class=\"col-12 col-sm-11 col-md-10 recieved-message text-white py-1 px-2 rounded bg-light-blue mr-custom-auto\">\r\n                      {{message?.msg ? message.msg : ''}}<br>\r\n                      <span class=\"message-time\">{{message.sentDate | date: 'h:mm a'}}</span>\r\n                    </p>\r\n                  </ng-container>\r\n                    <ng-container *ngIf=\"message.sender == secondSender\">\r\n                        <p class=\"col-12 col-sm-11 col-md-10 recieved-message text-white py-1 px-2 rounded bg-grey-blue ml-custom-auto\">\r\n                            {{message?.msg ? message.msg : ''}}<br>\r\n                            <span class=\"message-time\">{{message.sentDate | date: 'h:mm a'}}</span>\r\n                        </p>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </div>\r\n            <div>\r\n            </div>\r\n            <form [formGroup]=\"messageForm\" class=\"\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"input-group mb-3\">\r\n                    <input type=\"text\" class=\"form-control\" name=\"message\" formControlName=\"message\" placeholder=\"{{'type-here' | translate}}\" aria-label=\"Type here\" aria-describedby=\"basic-addon2\">\r\n                    <div class=\"input-group-append\">\r\n                        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!messageForm.valid\">{{'send' | translate}}</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {interval, Observable, throwError} from 'rxjs';\nimport {AdminConfig} from '../../AdminConfig';\nimport {ChatsResponse} from '../model/chats-response';\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\nimport {AngularFirestore, QuerySnapshot} from '@angular/fire/firestore';\nimport {MessageModel} from '../model/message-model';\nimport {TokenService} from '../../admin-service/token/token.service';\nimport {DatePipe} from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatsService {\n\n  constructor(private httpClient: HttpClient,\n              private tokenService: TokenService,\n              private datePipe: DatePipe,\n              private firestore: AngularFirestore) { }\n\n  private static errorHandler(error: HttpErrorResponse) {\n    return throwError(error || 'Server Error');\n  }\n\n  getAllChats(): Observable<ChatsResponse> {\n    return this.httpClient.get<ChatsResponse>(\n      AdminConfig.chatsAPI,\n      this.tokenService.httpOptions()\n    ).pipe(catchError(ChatsService.errorHandler));\n  }\n\n  // This sends the message\n  sendMessage(chatRoomId: string, message: string, clientId: string): void {\n    const chatMsg: MessageModel = {\n      msg: message,\n      sender: clientId,\n      sentDate: this.datePipe.transform(new Date(), 'yyyy-MM-ddTHH:mm:ss', 'TZD').toString()\n    };\n\n    this.firestore.collection('chat_rooms')\n      .doc(chatRoomId)\n      .collection('messages').add(chatMsg);\n  }\n\n  // This Listens to messages changes in the chat room\n  getMessagesObservable(chatRoomId: string): Observable<QuerySnapshot<any>> {\n    if (chatRoomId) {\n      return interval(1000).pipe(\n        startWith(0),\n        switchMap(() => this.firestore.collection('chat_rooms')\n          .doc(chatRoomId).collection('messages').get())\n      );\n    }\n  }\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Chat } from '../model/chat.model';\n\nexport const loadChats = createAction(\n  '[Chat/API] Load Chats'\n);\n\nexport const loadChatsSuccess = createAction(\n  '[Chat/API] Load Chats Success',\n  props<{ Data: any }>()\n);\n\nexport const loadChatsFailure = createAction(\n  '[Chat/API] Load Chats Failure',\n  props<{ error: string }>()\n);\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ChatsService} from '../services/chats.service';\nimport * as chatAction from './chat.actions';\nimport {catchError, map, mergeMap} from 'rxjs/operators';\nimport {of} from 'rxjs';\n\n\n@Injectable()\nexport class ChatEffects {\n\n  constructor(private actions$: Actions,\n              private chatService: ChatsService) {}\n\n  loadChats$ = createEffect(() => this.actions$.pipe(\n    ofType(chatAction.loadChats),\n    mergeMap(() => this.chatService.getAllChats()\n      .pipe(\n        map(response => chatAction.loadChatsSuccess(response)),\n        catchError(error => of(chatAction.loadChatsFailure(error)))\n      ))\n  ));\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Chat } from '../model/chat.model';\nimport * as ChatActions from './chat.actions';\n\nexport const chatsFeatureKey = 'chats';\n\nexport interface ChatState extends EntityState<Chat> {\n  // additional entities state properties\n  Data: Chat[];\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Chat> = createEntityAdapter<Chat>();\n\nexport const initialState: ChatState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(ChatActions.loadChatsSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(ChatActions.loadChatsFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  )\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {chatsFeatureKey, ChatState, selectAll} from './chat.reducer';\r\n\r\nconst chatFeatureState = createFeatureSelector<ChatState>(chatsFeatureKey);\r\n\r\nexport const chatsSelector = createSelector(chatFeatureState, selectAll);\r\n"]}