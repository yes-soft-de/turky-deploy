{"version":3,"sources":["webpack:///node_modules/@ngrx/entity/__ivy_ngcc__/fesm2015/ngrx-entity.js","webpack:///src/app/pages/AdminConfig.ts"],"names":["getInitialEntityState","ids","entities","createInitialStateFactory","getInitialState","additionalState","Object","assign","createSelectorsFactory","getSelectors","selectState","selectIds","state","selectEntities","selectAll","map","id","selectTotal","length","DidMutate","EntitiesOnly","Both","None","createStateOperator","mutator","operation","arg","clonedEntityState","didMutate","selectIdValue","entity","selectId","key","undefined","console","warn","toString","createUnsortedStateAdapter","addOneMutably","push","addManyMutably","setAllMutably","setOneMutably","removeOneMutably","removeManyMutably","keysOrPredicate","keys","Array","filter","removeAll","takeNewKey","update","original","updated","changes","newKey","hasNewKey","updateOneMutably","updateManyMutably","updates","newKeys","didMutateEntities","didMutateIds","mapMutably","reduce","change","mapOneMutably","updatedEntity","upsertOneMutably","upsertManyMutably","added","didMutateByUpdated","didMutateByAdded","addOne","addMany","addAll","setAll","setOne","updateOne","updateMany","upsertOne","upsertMany","removeOne","removeMany","mapOne","createSortedStateAdapter","sort","newModels","models","model","merge","val","takeUpdatedModel","originalIds","updatedIndexes","index","every","i","updatesOrMap","j","modelId","entityId","concat","slice","forEach","createEntityAdapter","options","sortComparer","instance","stateFactory","selectorsFactory","stateAdapter","DictionaryNum","Dictionary","UpdateStr","UpdateNum","EntityMapOneNum","EntityMapOneStr","EntityState","EntityDefinition","EntityStateAdapter","EntitySelectors","EntityAdapter","AdminConfig","sourceAPI","sourceApi","loginAPI","userAPI","productsAPI","allRealEstateAPI","getRealEstateAPI","deleteRealEstateAPI","allCarsAPI","getCarAPI","deleteCarAPI","allDevicesAPI","getDeviceAPI","deleteDeviceAPI","reportsAPI","reportAPI","deleteReportAPI","chatsAPI","statisticsAPI","allServicesAPI","servicesAPI","categoriesAPI","categoryAPI","generalUploadAPI"],"mappings":"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","file":"default~cars-cars-module~categories-categories-module~chats-chats-module~devices-devices-module~prod~36d02cfd-es5.js","sourcesContent":["import { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/entity_state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template V\n * @return {?}\n */\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\n/**\n * @template V\n * @return {?}\n */\nfunction createInitialStateFactory() {\n    /**\n     * @param {?=} additionalState\n     * @return {?}\n     */\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/state_selectors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @return {?}\n */\nfunction createSelectorsFactory() {\n    /**\n     * @param {?=} selectState\n     * @return {?}\n     */\n    function getSelectors(selectState) {\n        /** @type {?} */\n        const selectIds = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.ids);\n        /** @type {?} */\n        const selectEntities = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.entities);\n        /** @type {?} */\n        const selectAll = createSelector(selectIds, selectEntities, (/**\n         * @param {?} ids\n         * @param {?} entities\n         * @return {?}\n         */\n        (ids, entities) => ids.map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => ((/** @type {?} */ (entities)))[id]))));\n        /** @type {?} */\n        const selectTotal = createSelector(selectIds, (/**\n         * @param {?} ids\n         * @return {?}\n         */\n        (ids) => ids.length));\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst DidMutate = {\n    EntitiesOnly: 0,\n    Both: 1,\n    None: 2,\n};\nDidMutate[DidMutate.EntitiesOnly] = 'EntitiesOnly';\nDidMutate[DidMutate.Both] = 'Both';\nDidMutate[DidMutate.None] = 'None';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nfunction createStateOperator(mutator) {\n    return (/**\n     * @template S\n     * @param {?} arg\n     * @param {?} state\n     * @return {?}\n     */\n    function operation(arg, state) {\n        /** @type {?} */\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: Object.assign({}, state.entities),\n        };\n        /** @type {?} */\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return Object.assign(Object.assign({}, state), { entities: clonedEntityState.entities });\n        }\n        return state;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} entity\n * @param {?} selectId\n * @return {?}\n */\nfunction selectIdValue(entity, selectId) {\n    /** @type {?} */\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/unsorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nfunction createUnsortedStateAdapter(selectId) {\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(entities, state) {\n        /** @type {?} */\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            state.entities[key] = entity;\n            return DidMutate.EntitiesOnly;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    /**\n     * @param {?} keysOrPredicate\n     * @param {?} state\n     * @return {?}\n     */\n    function removeManyMutably(keysOrPredicate, state) {\n        /** @type {?} */\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => keysOrPredicate(state.entities[key])));\n        /** @type {?} */\n        const didMutate = keys\n            .filter((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => key in state.entities))\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => delete state.entities[key])).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @return {?}\n             */\n            (id) => id in state.entities));\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    /**\n     * @param {?} keys\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeNewKey(keys, update, state) {\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        /** @type {?} */\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const newKeys = {};\n        updates = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        (update) => update.id in state.entities));\n        /** @type {?} */\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            /** @type {?} */\n            const didMutateIds = updates.filter((/**\n             * @param {?} update\n             * @return {?}\n             */\n            (update) => takeNewKey(newKeys, update, state))).length >\n                0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((/**\n                 * @param {?} id\n                 * @return {?}\n                 */\n                (id) => newKeys[id] || id));\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    /**\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(map, state) {\n        /** @type {?} */\n        const changes = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        /** @type {?} */\n        const updates = changes.filter((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ id }) => id in state.entities));\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} __0\n     * @param {?} state\n     * @return {?}\n     */\n    function mapOneMutably({ map, id }, state) {\n        /** @type {?} */\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        /** @type {?} */\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/sorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    /**\n     * @param {?} newModels\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(newModels, state) {\n        /** @type {?} */\n        const models = newModels.filter((/**\n         * @param {?} model\n         * @return {?}\n         */\n        (model) => !(selectIdValue(model, selectId) in state.entities)));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            state.ids = state.ids.filter((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => val !== id));\n            merge([entity], state);\n            return DidMutate.Both;\n        }\n        else {\n            return addOneMutably(entity, state);\n        }\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} models\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const models = [];\n        /** @type {?} */\n        const didMutateIds = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        (update) => takeUpdatedModel(models, update, state)))\n            .length > 0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            /** @type {?} */\n            const originalIds = state.ids;\n            /** @type {?} */\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @param {?} index\n             * @return {?}\n             */\n            (id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            }));\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((/**\n                 * @param {?} i\n                 * @return {?}\n                 */\n                (i) => state.ids[i] === originalIds[i]))) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    /**\n     * @param {?} updatesOrMap\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(updatesOrMap, state) {\n        /** @type {?} */\n        const updates = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} __0\n     * @param {?} state\n     * @return {?}\n     */\n    function mapOneMutably({ map, id }, state) {\n        /** @type {?} */\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        /** @type {?} */\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function merge(models, state) {\n        models.sort(sort);\n        /** @type {?} */\n        const ids = [];\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            /** @type {?} */\n            const model = models[i];\n            /** @type {?} */\n            const modelId = selectIdValue(model, selectId);\n            /** @type {?} */\n            const entityId = state.ids[j];\n            /** @type {?} */\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((/**\n         * @param {?} model\n         * @param {?} i\n         * @return {?}\n         */\n        (model, i) => {\n            state.entities[selectId(model)] = model;\n        }));\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/create_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = Object.assign({ sortComparer: false, selectId: (/**\n         * @param {?} instance\n         * @return {?}\n         */\n        (instance) => instance.id) }, options);\n    /** @type {?} */\n    const stateFactory = createInitialStateFactory();\n    /** @type {?} */\n    const selectorsFactory = createSelectorsFactory();\n    /** @type {?} */\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return Object.assign(Object.assign(Object.assign({ selectId,\n        sortComparer }, stateFactory), selectorsFactory), stateAdapter);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/models.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction DictionaryNum() { }\n/**\n * @abstract\n * @template T\n */\nclass Dictionary {\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateStr() { }\nif (false) {\n    /** @type {?} */\n    UpdateStr.prototype.id;\n    /** @type {?} */\n    UpdateStr.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateNum() { }\nif (false) {\n    /** @type {?} */\n    UpdateNum.prototype.id;\n    /** @type {?} */\n    UpdateNum.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityMapOneNum() { }\nif (false) {\n    /** @type {?} */\n    EntityMapOneNum.prototype.id;\n    /** @type {?} */\n    EntityMapOneNum.prototype.map;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityMapOneStr() { }\nif (false) {\n    /** @type {?} */\n    EntityMapOneStr.prototype.id;\n    /** @type {?} */\n    EntityMapOneStr.prototype.map;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityState() { }\nif (false) {\n    /** @type {?} */\n    EntityState.prototype.ids;\n    /** @type {?} */\n    EntityState.prototype.entities;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityDefinition() { }\nif (false) {\n    /** @type {?} */\n    EntityDefinition.prototype.selectId;\n    /** @type {?} */\n    EntityDefinition.prototype.sortComparer;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityStateAdapter() { }\nif (false) {\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addMany = function (entities, state) { };\n    /**\n     * @deprecated addAll has been renamed. Use setAll instead.\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} predicate\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (predicate, state) { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeAll = function (state) { };\n    /**\n     * @template S\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateOne = function (update, state) { };\n    /**\n     * @template S\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateMany = function (updates, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertMany = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.mapOne = function (map, state) { };\n    /**\n     * @template S\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.map = function (map, state) { };\n}\n/**\n * @record\n * @template T, V\n */\nfunction EntitySelectors() { }\nif (false) {\n    /** @type {?} */\n    EntitySelectors.prototype.selectIds;\n    /** @type {?} */\n    EntitySelectors.prototype.selectEntities;\n    /** @type {?} */\n    EntitySelectors.prototype.selectAll;\n    /** @type {?} */\n    EntitySelectors.prototype.selectTotal;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityAdapter() { }\nif (false) {\n    /** @type {?} */\n    EntityAdapter.prototype.selectId;\n    /** @type {?} */\n    EntityAdapter.prototype.sortComparer;\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function () { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function (state) { };\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function () { };\n    /**\n     * @template V\n     * @param {?} selectState\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function (selectState) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngrx-entity.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Dictionary, createEntityAdapter };\n\n//# sourceMappingURL=ngrx-entity.js.map","import { environment } from \"src/environments/environment.prod\";\r\n\r\nexport class AdminConfig {\r\n  // An Example | Delete The Content When Started\r\n  // source api\r\n  public static sourceAPI                   = environment.sourceApi;\r\n  // public static sourceAPI                   = 'http://localhost:8000/';\r\n\r\n  // All Application Api\r\n  public static loginAPI                    = AdminConfig.sourceAPI + 'login_check';\r\n  public static userAPI                     = AdminConfig.sourceAPI + 'user';\r\n\r\n  // Products\r\n  public static productsAPI                 = AdminConfig.sourceAPI + 'allproperties';\r\n\r\n  // Real Estate\r\n  public static allRealEstateAPI            = AdminConfig.sourceAPI + 'allRealEstate';\r\n  public static getRealEstateAPI            = AdminConfig.sourceAPI + 'realEstate';\r\n  public static deleteRealEstateAPI         = AdminConfig.sourceAPI + 'realEstate';\r\n\r\n  // Cars\r\n  public static allCarsAPI                  = AdminConfig.sourceAPI + 'allCars';\r\n  public static getCarAPI                   = AdminConfig.sourceAPI + 'car';\r\n  public static deleteCarAPI                = AdminConfig.sourceAPI + 'cars';\r\n\r\n  // Devices\r\n  public static allDevicesAPI               = AdminConfig.sourceAPI + 'allDevices';\r\n  public static getDeviceAPI                = AdminConfig.sourceAPI + 'device';\r\n  public static deleteDeviceAPI             = AdminConfig.sourceAPI + 'devices';\r\n\r\n  // Reports\r\n  public static reportsAPI                  = AdminConfig.sourceAPI + 'reports';\r\n  public static reportAPI                   = AdminConfig.sourceAPI + 'report';\r\n  public static deleteReportAPI             = AdminConfig.sourceAPI + 'deletereport';\r\n\r\n  // Chats\r\n  public static chatsAPI                    = AdminConfig.sourceAPI + 'getallchat';\r\n\r\n  // Statistics\r\n  public static statisticsAPI               = AdminConfig.sourceAPI + 'statistics';\r\n  \r\n  // Services\r\n  public static allServicesAPI              = AdminConfig.sourceAPI + 'allservices';\r\n  public static servicesAPI                 = AdminConfig.sourceAPI + 'services';\r\n  \r\n  // Categories\r\n  public static categoriesAPI                = AdminConfig.sourceAPI + 'categories';\r\n  public static categoryAPI                  = AdminConfig.sourceAPI + 'category';\r\n\r\n\r\n  // Upload\r\n  public static generalUploadAPI            = AdminConfig.sourceAPI + 'uploadfile';\r\n}\r\n"]}