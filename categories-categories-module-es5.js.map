{"version":3,"sources":["webpack:///src/app/pages/categories/categories-routing.module.ts","webpack:///src/app/pages/categories/categories.module.ts","webpack:///src/app/pages/categories/components/add-category/add-category.component.ts","webpack:///src/app/pages/categories/components/add-category/add-category.component.html","webpack:///src/app/pages/categories/components/all-categories/all-categories.component.ts","webpack:///src/app/pages/categories/components/all-categories/all-categories.component.html","webpack:///src/app/pages/categories/components/update-category/update-category.component.ts","webpack:///src/app/pages/categories/components/update-category/update-category.component.html","webpack:///src/app/pages/categories/services/categories.service.ts","webpack:///src/app/pages/categories/store/category.actions.ts","webpack:///src/app/pages/categories/store/category.effects.ts","webpack:///src/app/pages/categories/store/category.reducer.ts","webpack:///src/app/pages/categories/store/category.selector.ts"],"names":["routes","path","component","CategoriesRoutingModule","forChild","imports","exports","CategoriesModule","forFeature","declarations","AddCategoryComponent","store","toaster","addCategoryForm","lang","required","name","description","valid","error","formObject","getRawValue","console","log","dispatch","category","onSubmit","selector","templateUrl","styleUrls","AllCategoriesComponent","categoriesList","isDeleted","getCategories","select","subscribe","data","categories","config","itemsPerPage","currentPage","totalItems","length","event","categoryId","confirm","id","filter","res","toLocaleLowerCase","match","UpdateCategoryComponent","activatedRouter","paramMap","params","get","getCategory","fillForm","CategoriesService","httpClient","categoriesAPI","categoryAPI","post","JSON","stringify","put","providedIn","loadCategories","loadCategoriesSuccess","loadCategoriesFailure","loadCategory","loadCategorySuccess","loadCategoryFailure","addCategory","addCategorySuccess","addCategoryFailure","deleteCategory","deleteCategorySuccess","deleteCategoryFailure","updateCategory","updateCategorySuccess","updateCategoryFailure","CategoryEffects","actions$","categoryService","router","loadCategories$","pipe","response","loadCategory$","action","newCategory$","newCategory","success","msg","updateCategory$","changes","redirectAfterAddCategory$","navigate","deleteCategory$","categoriesFeatureKey","adapter","initialState","getInitialState","Data","undefined","reducer","state","setAll","addOne","removeOne","updateOne","getSelectors","selectIds","selectEntities","selectAll","selectTotal","categoriesFeatureState","getAllCategoriesSelector","getCategorySelector","categoriesErrorSelector"],"mappings":"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","file":"categories-categories-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddCategoryComponent } from './components/add-category/add-category.component';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { UpdateCategoryComponent } from './components/update-category/update-category.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllCategoriesComponent },\n  { path: 'add', component: AddCategoryComponent },\n  { path: ':id', component: UpdateCategoryComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CategoriesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CategoriesRoutingModule } from './categories-routing.module';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { AddCategoryComponent } from './components/add-category/add-category.component';\nimport { UpdateCategoryComponent } from './components/update-category/update-category.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromCategory from './store/category.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { CategoryEffects } from './store/category.effects';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\n\n\n@NgModule({\n  declarations: [AllCategoriesComponent, AddCategoryComponent, UpdateCategoryComponent],\n  imports: [\n    ThemeModule,\n    CategoriesRoutingModule,\n    StoreModule.forFeature(fromCategory.categoriesFeatureKey, fromCategory.reducer),\n    EffectsModule.forFeature([CategoryEffects])\n  ]\n})\nexport class CategoriesModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Category } from '../../model/category.model';\nimport * as categoryActions from '../../store/category.actions';\nimport { CategoryState } from '../../store/category.reducer';\n\n@Component({\n  selector: 'app-add-category',\n  templateUrl: './add-category.component.html',\n  styleUrls: ['./add-category.component.scss']\n})\nexport class AddCategoryComponent implements OnInit {\n\n  addCategoryForm: FormGroup;\n\n  constructor(private store: Store<CategoryState>,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    this.addCategoryForm = new FormGroup({\n      lang: new FormControl('', Validators.required),\n      name: new FormControl('', Validators.required),\n      description: new FormControl(''),\n    });\n  }\n\n  onSubmit() {\n    if (!this.addCategoryForm.valid) {\n      this.toaster.error('Form not valid, please try again');\n      return;\n    } else {\n      const formObject = this.addCategoryForm.getRawValue();\n      console.log(formObject);\n      this.store.dispatch(categoryActions.addCategory({category: formObject}));\n    }\n  }\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid mb-5\">\n    <div class=\"content-header mt-5 mb-4 text-center\">\n        <h1>{{'new-category' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header\">\n            <h3 class=\"card-title\">{{'add-new-category' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addCategoryForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'lang' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"lang\"\n                            formControlName=\"lang\">\n                        <option value=\"\">{{'select-lang-placeholder' | translate}}</option>\n                        <option value=\"en\">{{'english' | translate}}</option>\n                        <option value=\"ar\">{{'arabic' | translate}}</option>\n                        <option value=\"tr\">{{'turkish' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('lang').errors?.required\">{{'lang-field-is-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('name').errors &&\n                           (addCategoryForm.get('name').touched || addCategoryForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('name').errors?.required\">{{'name-field-is-required' | translate}}</span>                      \n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('description').errors &&\n                           (addCategoryForm.get('description').touched || addCategoryForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('description').errors?.required\">{{'descriptioon-field-is-required' | translate}}</span>\n                </div>\n\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"addCategoryForm.invalid\">{{'create' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Category } from '../../model/category.model';\nimport * as categoryActions from '../../store/category.actions';\nimport { CategoryState } from '../../store/category.reducer';\nimport { categoriesErrorSelector, getAllCategoriesSelector } from '../../store/category.selector';\n\n@Component({\n  selector: 'app-all-categories',\n  templateUrl: './all-categories.component.html',\n  styleUrls: ['./all-categories.component.scss']\n})\nexport class AllCategoriesComponent implements OnInit {\n  categories: Category[];\n  categoriesList: Category[] = [];\n  error$: Observable<string>;\n  isDeleted = false;\n  config: any;                                          // Config Variable For Pagination Configuration\n  name: string;\n\n  constructor(private store: Store<CategoryState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(categoryActions.loadCategories());\n    this.getCategories();\n    \n    this.store.select(categoriesErrorSelector).subscribe(\n      error => console.log('error', error)\n    );\n  }\n\n  getCategories() {\n    this.store.select(getAllCategoriesSelector).subscribe(\n      data => {\n        if (data) {\n          this.categories = data;\n          this.categoriesList = data;\n\n          this.config = {\n            itemsPerPage: 5,\n            currentPage: 1,\n            totalItems: this.categoriesList.length\n          };\n        }\n      }\n    );\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  // Delete The Category\n  delete(categoryId: string) {\n    if (confirm('Are You Sure You Want To Delete This Category')) {\n      this.store.dispatch(categoryActions.deleteCategory({id: categoryId}));\n    }\n  }\n\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.categoriesList = [...this.categories];\n    } else {\n      this.categoriesList = [];\n      this.categoriesList = this.categories.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            // display the Name Column\n            return name;\n          }\n        }\n        if (res.description) {\n          const description = res.description.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (description) {\n            // display the Name Column\n            return description;\n          }\n        }\n      });\n    }\n  }\n\n}\n","<div *ngIf=\"categories != null\">\n    <div *ngIf=\"categories.length !== 0\">\n      <!-- <div class=\"container-fluid\"> -->\n        <h1 class=\"text-center details-title my-4\">{{'manage-categories-page' | translate}}</h1>\n          <div class=\"row\">\n              <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n                  <div class=\"form-group mb-4\">\n                      <input\n                        id=\"exampleFormControlInput2\"\n                        [(ngModel)]=\"name\"\n                        (keyup)=\"applyFilter()\"\n                        type=\"text\"\n                        placeholder=\"{{'category-search-input' | translate}}\"\n                        title=\"{{'category-search-input' | translate}}\"\n                        class=\"form-control form-control-underlined border-primary search-input\">\n                  </div>\n              </div>\n              <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n                <!-- <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/categories/add\">\n                  <i class=\"fa fa-plus\"></i>\n                  {{'add-new-car' | translate}}\n                </a> -->\n              </div>\n          </div>\n        <div class=\"table-responsive text-center\">\n            <table class=\"table table-bordered main-table\">\n                <tr class=\"bg-dark text-white\">\n                    <td>{{'name' | translate}}</td>\n                    <td>{{'description' | translate}}</td>\n                    <td>{{'control' | translate}}</td>\n                </tr>\n                <tr *ngFor=\"let category of categoriesList | paginate: config\">\n                  <td>{{category?.name ? category?.name : '-'}}</td>\n                  <td class=\"td-custom\">{{category?.description ? category?.description : '-'}}</td>                \n                  <td>\n                      <a routerLink=\"/categories/{{category?.id}}\" class=\"btn btn-success btn-sm mr-1 mb-1\">\n                        {{'update' | translate}}\n                    </a>\n                    <a (click)=\"delete(category?.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1\">\n                        {{'delete' | translate}}\n                      </a>\n                  </td>\n                </tr>\n            </table>\n            <pagination-controls class=\"my-pagination\"\n                                 (pageChange)=\"pageChanged($event)\"\n                                 autoHide=\"true\"\n                                 maxSize=\"5\"\n                                 responsive=\"true\"\n                                 previousLabel=\"{{'prev' | translate}}\"\n                                 nextLabel=\"{{'next' | translate}}\"\n                                 screenReaderPaginationLabel=\"Pagination\"\n                                 screenReaderPageLabel=\"page\"\n                                 screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n            </pagination-controls>\n        </div>\n      <!-- </div> -->\n    </div>\n    <!-- <div *ngIf=\"categoriesFilterList.length === 0\">\n        <div class=\"container\">\n            <div class=\"alert alert-primary text-center mt-5\">{{'categories-not-found' | translate}}</div>\n            <a routerLink=\"/categories/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n                <i class=\"fa fa-plus\"></i>\n                {{'add-new-category' | translate}}\n            </a>\n        </div>\n    </div> -->\n</div>\n<div *ngIf=\"categories.length === 0\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { CategoryState } from '../../store/category.reducer';\nimport * as categoryActions from '../../store/category.actions';\nimport { ActivatedRoute } from '@angular/router';\nimport { getCategorySelector } from '../../store/category.selector';\nimport { Category } from '../../model/category.model';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-update-category',\n  templateUrl: './update-category.component.html',\n  styleUrls: ['./update-category.component.scss']\n})\nexport class UpdateCategoryComponent implements OnInit {\n  categoryData: Category;\n  addCategoryForm: FormGroup;\n\n  constructor(private store: Store<CategoryState>,\n              private activatedRouter: ActivatedRoute,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    this.activatedRouter.paramMap.subscribe(params => {      \n      this.store.dispatch(categoryActions.loadCategory({id: params.get('id')}));\n    });\n    this.addCategoryForm = new FormGroup({\n      lang: new FormControl('', Validators.required),\n      name: new FormControl('', Validators.required),\n      description: new FormControl(''),\n    });\n    this.getCategory();\n  }\n\n  getCategory() {\n    this.store.select(getCategorySelector).subscribe(\n      data => {\n        if (data) {\n          this.fillForm(data);\n        }\n      }\n    );\n  }\n\n  fillForm(data: Category) {\n    this.addCategoryForm = new FormGroup({\n      id: new FormControl(data.id),\n      lang: new FormControl(data.lang, Validators.required),\n      name: new FormControl(data.name, Validators.required),\n      description: new FormControl(data.description),\n    });\n  }\n\n  onSubmit() {\n    if (!this.addCategoryForm.valid) {\n      this.toaster.error('Form not valid, please try again');\n      return;\n    } else {\n      const formObject = this.addCategoryForm.getRawValue();\n      console.log(formObject);\n      this.store.dispatch(categoryActions.updateCategory({category: formObject}));\n    }\n  }\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid mb-5\">\n    <div class=\"content-header mt-5 mb-4 text-center\">\n        <h1>{{'update-category' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header\">\n            <!-- <h3 class=\"card-title\">{{'add-new-category' | translate}}</h3> -->\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addCategoryForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'lang' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"lang\"\n                            formControlName=\"lang\">\n                        <option value=\"\">{{'select-lang-placeholder' | translate}}</option>\n                        <option value=\"en\">{{'english' | translate}}</option>\n                        <option value=\"ar\">{{'arabic' | translate}}</option>\n                        <option value=\"tr\">{{'turkish' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('lang').errors?.required\">{{'lang-field-is-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('name').errors &&\n                           (addCategoryForm.get('name').touched || addCategoryForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('name').errors?.required\">{{'name-field-is-required' | translate}}</span>                      \n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('description').errors &&\n                           (addCategoryForm.get('description').touched || addCategoryForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('description').errors?.required\">{{'descriptioon-field-is-required' | translate}}</span>\n                </div>\n\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"addCategoryForm.invalid\">{{'update' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AdminConfig } from '../../AdminConfig';\nimport { CategoriesResponse } from '../model/categories-response';\nimport { CategoryResponse } from '../model/category-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoriesService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getCategories(): Observable<CategoriesResponse> {\n    return this.httpClient.get<CategoriesResponse>(AdminConfig.categoriesAPI);\n  }\n  \n  getCategory(categoryId: string): Observable<CategoryResponse> {\n    return this.httpClient.get<CategoryResponse>(`${AdminConfig.categoryAPI}/${categoryId}`);\n  }\n \n  newCategory(data): Observable<CategoryResponse> {\n    return this.httpClient.post<CategoryResponse>(AdminConfig.categoryAPI, JSON.stringify(data));\n  }\n  \n  updateCategory(data): Observable<any> {\n    return this.httpClient.put<any>(AdminConfig.categoryAPI, JSON.stringify(data));\n  }\n\n  deleteCategory(categoryId: string): Observable<any> {\n    return this.httpClient.delete<any>(`${AdminConfig.categoryAPI}/${categoryId}`);\n  }\n}","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Category } from '../model/category.model';\n\nexport const loadCategories = createAction(\n  '[Category/API] Load Categories'\n);\n\nexport const loadCategoriesSuccess = createAction(\n  '[Category/API] Load Categories Success', \n  props<{ Data: Category[] }>()\n);\n\nexport const loadCategoriesFailure = createAction(\n  '[Category/API] Load Categories Failure', \n  props<{ error: string }>()\n);\n\nexport const loadCategory = createAction(\n  '[Category/API] Load Category',\n  props<{ id: string }>()\n);\n\nexport const loadCategorySuccess = createAction(\n  '[Category/API] Load Category Success', \n  props<{ Data: Category }>()\n);\n\nexport const loadCategoryFailure = createAction(\n  '[Category/API] Load Category Failure', \n  props<{ error: string }>()\n);\n\nexport const addCategory = createAction(\n  '[Category/API] Add Category',\n  props<{ category: Category }>()\n);\n\nexport const addCategorySuccess = createAction(\n  '[Category/API] Add Category Success'\n);\n\nexport const addCategoryFailure = createAction(\n  '[Category/API] Add Category Failure',\n  props<{ error: string }>()\n);\n\nexport const deleteCategory = createAction(\n  '[Category/API] Delete Category',\n  props<{ id: string }>()\n);\n\nexport const deleteCategorySuccess = createAction(\n  '[Category/API] Delete Category Success',\n  props<{ id: string }>()\n);\n\nexport const deleteCategoryFailure = createAction(\n  '[Category/API] Delete Category Failure',\n  props<{ error: string }>()\n);\n\nexport const updateCategory = createAction(\n  '[Category/API] Update Category',\n  props<{ category: Category }>()\n);\n\nexport const updateCategorySuccess = createAction(\n  '[Category/API] Update Category Success',\n  props<{ category: Update<Category> }>()\n);\n\nexport const updateCategoryFailure = createAction(\n  '[Category/API] Update Category Failure',\n  props<{ error: string }>()\n);\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { act, Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Update } from '@ngrx/entity';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, switchMap } from 'rxjs/operators';\nimport { Category } from '../model/category.model';\nimport { CategoriesService } from '../services/categories.service';\nimport * as categoryActions from './category.actions';\n\n\n@Injectable()\nexport class CategoryEffects {\n\n  constructor(private actions$: Actions,\n              private categoryService: CategoriesService,\n              private toaster: ToastrService,\n              private router: Router) {}\n\n  loadCategories$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.loadCategories),\n    switchMap(() => this.categoryService.getCategories()\n      .pipe(\n        map(response => {\n          // console.log('effect load all :', response);\n          return categoryActions.loadCategoriesSuccess(response);\n        }),\n        catchError(error => of(categoryActions.loadCategoriesFailure({error})))\n      ))\n  ));\n\n  \n  loadCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.loadCategory),\n    switchMap(action => this.categoryService.getCategory(action.id)\n      .pipe(\n        map(response => {\n          // console.log('effect load one :', response);\n          return categoryActions.loadCategorySuccess(response);\n        }),\n        catchError(error => of(categoryActions.loadCategoryFailure({error})))\n      ))\n  ));\n\n\n  newCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.addCategory),\n    exhaustMap(action => this.categoryService.newCategory(action.category)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response.msg);\n          return categoryActions.addCategorySuccess();\n        }),\n        catchError(error => {\n          console.log('add error : ', error);\n          return of(categoryActions.addCategoryFailure({error}));\n        })\n      ))\n  ));\n\n  \n  updateCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.updateCategory),\n    exhaustMap(action => this.categoryService.updateCategory(action.category)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response.msg);\n          const updateCategory: Update<Category> = {\n            id: action.category.id,\n            changes: {\n              ...action.category\n            }\n          };\n          return categoryActions.updateCategorySuccess({category: updateCategory});\n        }),\n        catchError(error => {\n          console.log('update error : ', error);\n          return of(categoryActions.updateCategoryFailure({error}));\n        })\n      ))\n  ));\n\n\n  redirectAfterAddCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(...[categoryActions.addCategorySuccess, categoryActions.updateCategorySuccess]),\n    map(() => this.router.navigate(['categories']))\n  ), { dispatch: false });\n\n\n  deleteCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.deleteCategory),\n    exhaustMap(action => this.categoryService.deleteCategory(action.id)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response.msg);\n          return categoryActions.deleteCategorySuccess({id: action.id});\n        }),\n        catchError(error => {\n          console.log('delete error : ', error);\n          return of(categoryActions.deleteCategoryFailure({error}));\n        })\n      ))\n  ));\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Category } from '../model/category.model';\nimport * as CategoryActions from './category.actions';\n\nexport const categoriesFeatureKey = 'categories';\n\nexport interface CategoryState extends EntityState<Category> {\n  // additional entities state properties\n  Data: Category[];\n  category: Category;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Category> = createEntityAdapter<Category>();\n\nexport const initialState: CategoryState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  category: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(CategoryActions.loadCategoriesSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(CategoryActions.loadCategoriesFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.loadCategorySuccess,\n    (state, action) => {\n      return {\n        ...state,\n        category: action.Data\n      };\n    }\n  ),\n  on(CategoryActions.loadCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.addCategory,\n    (state, action) => adapter.addOne(action.category, state)\n  ),\n  on(CategoryActions.addCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.deleteCategorySuccess,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(CategoryActions.deleteCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.updateCategorySuccess,\n    (state, action) => adapter.updateOne(action.category, state)\n  ),\n  on(CategoryActions.updateCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { categoriesFeatureKey, CategoryState, selectAll } from \"./category.reducer\";\r\n\r\nconst categoriesFeatureState = createFeatureSelector(categoriesFeatureKey);\r\n\r\nexport const getAllCategoriesSelector = createSelector(categoriesFeatureState, selectAll);\r\n\r\nexport const getCategorySelector = createSelector(categoriesFeatureState, (state: CategoryState) => state.category);\r\n\r\nexport const categoriesErrorSelector = createSelector(categoriesFeatureState, (state: CategoryState) => state.error);"]}