{"version":3,"sources":["./node_modules/@ngrx/entity/__ivy_ngcc__/fesm2015/ngrx-entity.js","./src/app/pages/AdminConfig.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACH;;AAE1C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iDAAiD;AACjD;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,0BAA0B,kEAAc;AACxC,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,EAAE;AAC/B,mBAAmB,EAAE;AACrB,4BAA4B,kEAAc;AAC1C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAc;AACrC,4BAA4B,kEAAc;AAC1C,uBAAuB,kEAAc;AACrC,yBAAyB,kEAAc;AACvC;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,sCAAsC;AACtC;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mCAAmC;AACnC;AACA;AACA,iDAAiD,WAAW,uCAAuC;AACnG;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+BAA+B;AAC/B;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,UAAU;AACtC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,mCAAmC;AAC9C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,UAAU;AACtC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA,yCAAyC;AACzC,WAAW,yBAAyB,kBAAkB;AACtD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oCAAoC;AACpC,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,sDAAsD;AACtD,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAwHV;AACD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EASV;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAyBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAE2C;;AAE3C,uC;;;;;;;;;;;;ACriCA;AAAA;AAAA;AAAgE;AAEzD,MAAM,WAAW;;AACtB,+CAA+C;AAC/C,aAAa;AACC,qBAAS,GAAqB,6EAAW,CAAC,SAAS,CAAC;AAClE,wEAAwE;AAExE,sBAAsB;AACR,oBAAQ,GAAsB,WAAW,CAAC,SAAS,GAAG,aAAa,CAAC;AACpE,mBAAO,GAAuB,WAAW,CAAC,SAAS,GAAG,MAAM,CAAC;AAE3E,WAAW;AACG,uBAAW,GAAmB,WAAW,CAAC,SAAS,GAAG,eAAe,CAAC;AAEpF,cAAc;AACA,4BAAgB,GAAc,WAAW,CAAC,SAAS,GAAG,eAAe,CAAC;AACtE,4BAAgB,GAAc,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC;AACnE,+BAAmB,GAAW,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC;AAEjF,OAAO;AACO,sBAAU,GAAoB,WAAW,CAAC,SAAS,GAAG,SAAS,CAAC;AAChE,qBAAS,GAAqB,WAAW,CAAC,SAAS,GAAG,KAAK,CAAC;AAC5D,wBAAY,GAAkB,WAAW,CAAC,SAAS,GAAG,MAAM,CAAC;AAE3E,UAAU;AACI,yBAAa,GAAiB,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC;AACnE,wBAAY,GAAkB,WAAW,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/D,2BAAe,GAAe,WAAW,CAAC,SAAS,GAAG,SAAS,CAAC;AAE9E,UAAU;AACI,sBAAU,GAAoB,WAAW,CAAC,SAAS,GAAG,SAAS,CAAC;AAChE,qBAAS,GAAqB,WAAW,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/D,2BAAe,GAAe,WAAW,CAAC,SAAS,GAAG,cAAc,CAAC;AAEnF,QAAQ;AACM,oBAAQ,GAAsB,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC;AAEjF,aAAa;AACC,yBAAa,GAAiB,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC;AAEjF,WAAW;AACG,0BAAc,GAAgB,WAAW,CAAC,SAAS,GAAG,aAAa,CAAC;AACpE,uBAAW,GAAmB,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC;AAE/E,aAAa;AACC,yBAAa,GAAkB,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC;AACpE,uBAAW,GAAoB,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC;AAGhF,SAAS;AACK,4BAAgB,GAAc,WAAW,CAAC,SAAS,GAAG,YAAY,CAAC","file":"default~cars-cars-module~categories-categories-module~chats-chats-module~devices-devices-module~prod~36d02cfd-es2015.js","sourcesContent":["import { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/entity_state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template V\n * @return {?}\n */\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\n/**\n * @template V\n * @return {?}\n */\nfunction createInitialStateFactory() {\n    /**\n     * @param {?=} additionalState\n     * @return {?}\n     */\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/state_selectors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @return {?}\n */\nfunction createSelectorsFactory() {\n    /**\n     * @param {?=} selectState\n     * @return {?}\n     */\n    function getSelectors(selectState) {\n        /** @type {?} */\n        const selectIds = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.ids);\n        /** @type {?} */\n        const selectEntities = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.entities);\n        /** @type {?} */\n        const selectAll = createSelector(selectIds, selectEntities, (/**\n         * @param {?} ids\n         * @param {?} entities\n         * @return {?}\n         */\n        (ids, entities) => ids.map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => ((/** @type {?} */ (entities)))[id]))));\n        /** @type {?} */\n        const selectTotal = createSelector(selectIds, (/**\n         * @param {?} ids\n         * @return {?}\n         */\n        (ids) => ids.length));\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst DidMutate = {\n    EntitiesOnly: 0,\n    Both: 1,\n    None: 2,\n};\nDidMutate[DidMutate.EntitiesOnly] = 'EntitiesOnly';\nDidMutate[DidMutate.Both] = 'Both';\nDidMutate[DidMutate.None] = 'None';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nfunction createStateOperator(mutator) {\n    return (/**\n     * @template S\n     * @param {?} arg\n     * @param {?} state\n     * @return {?}\n     */\n    function operation(arg, state) {\n        /** @type {?} */\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: Object.assign({}, state.entities),\n        };\n        /** @type {?} */\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return Object.assign(Object.assign({}, state), { entities: clonedEntityState.entities });\n        }\n        return state;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} entity\n * @param {?} selectId\n * @return {?}\n */\nfunction selectIdValue(entity, selectId) {\n    /** @type {?} */\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/unsorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nfunction createUnsortedStateAdapter(selectId) {\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(entities, state) {\n        /** @type {?} */\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            state.entities[key] = entity;\n            return DidMutate.EntitiesOnly;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    /**\n     * @param {?} keysOrPredicate\n     * @param {?} state\n     * @return {?}\n     */\n    function removeManyMutably(keysOrPredicate, state) {\n        /** @type {?} */\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => keysOrPredicate(state.entities[key])));\n        /** @type {?} */\n        const didMutate = keys\n            .filter((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => key in state.entities))\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => delete state.entities[key])).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @return {?}\n             */\n            (id) => id in state.entities));\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    /**\n     * @param {?} keys\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeNewKey(keys, update, state) {\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        /** @type {?} */\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const newKeys = {};\n        updates = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        (update) => update.id in state.entities));\n        /** @type {?} */\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            /** @type {?} */\n            const didMutateIds = updates.filter((/**\n             * @param {?} update\n             * @return {?}\n             */\n            (update) => takeNewKey(newKeys, update, state))).length >\n                0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((/**\n                 * @param {?} id\n                 * @return {?}\n                 */\n                (id) => newKeys[id] || id));\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    /**\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(map, state) {\n        /** @type {?} */\n        const changes = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        /** @type {?} */\n        const updates = changes.filter((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ id }) => id in state.entities));\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} __0\n     * @param {?} state\n     * @return {?}\n     */\n    function mapOneMutably({ map, id }, state) {\n        /** @type {?} */\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        /** @type {?} */\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/sorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    /**\n     * @param {?} newModels\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(newModels, state) {\n        /** @type {?} */\n        const models = newModels.filter((/**\n         * @param {?} model\n         * @return {?}\n         */\n        (model) => !(selectIdValue(model, selectId) in state.entities)));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            state.ids = state.ids.filter((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => val !== id));\n            merge([entity], state);\n            return DidMutate.Both;\n        }\n        else {\n            return addOneMutably(entity, state);\n        }\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} models\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const models = [];\n        /** @type {?} */\n        const didMutateIds = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        (update) => takeUpdatedModel(models, update, state)))\n            .length > 0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            /** @type {?} */\n            const originalIds = state.ids;\n            /** @type {?} */\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @param {?} index\n             * @return {?}\n             */\n            (id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            }));\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((/**\n                 * @param {?} i\n                 * @return {?}\n                 */\n                (i) => state.ids[i] === originalIds[i]))) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    /**\n     * @param {?} updatesOrMap\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(updatesOrMap, state) {\n        /** @type {?} */\n        const updates = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} __0\n     * @param {?} state\n     * @return {?}\n     */\n    function mapOneMutably({ map, id }, state) {\n        /** @type {?} */\n        const entity = state.entities[id];\n        if (!entity) {\n            return DidMutate.None;\n        }\n        /** @type {?} */\n        const updatedEntity = map(entity);\n        return updateOneMutably({\n            id: id,\n            changes: updatedEntity,\n        }, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function merge(models, state) {\n        models.sort(sort);\n        /** @type {?} */\n        const ids = [];\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            /** @type {?} */\n            const model = models[i];\n            /** @type {?} */\n            const modelId = selectIdValue(model, selectId);\n            /** @type {?} */\n            const entityId = state.ids[j];\n            /** @type {?} */\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((/**\n         * @param {?} model\n         * @param {?} i\n         * @return {?}\n         */\n        (model, i) => {\n            state.entities[selectId(model)] = model;\n        }));\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n        mapOne: createStateOperator(mapOneMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/create_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = Object.assign({ sortComparer: false, selectId: (/**\n         * @param {?} instance\n         * @return {?}\n         */\n        (instance) => instance.id) }, options);\n    /** @type {?} */\n    const stateFactory = createInitialStateFactory();\n    /** @type {?} */\n    const selectorsFactory = createSelectorsFactory();\n    /** @type {?} */\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return Object.assign(Object.assign(Object.assign({ selectId,\n        sortComparer }, stateFactory), selectorsFactory), stateAdapter);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/models.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction DictionaryNum() { }\n/**\n * @abstract\n * @template T\n */\nclass Dictionary {\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateStr() { }\nif (false) {\n    /** @type {?} */\n    UpdateStr.prototype.id;\n    /** @type {?} */\n    UpdateStr.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateNum() { }\nif (false) {\n    /** @type {?} */\n    UpdateNum.prototype.id;\n    /** @type {?} */\n    UpdateNum.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityMapOneNum() { }\nif (false) {\n    /** @type {?} */\n    EntityMapOneNum.prototype.id;\n    /** @type {?} */\n    EntityMapOneNum.prototype.map;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityMapOneStr() { }\nif (false) {\n    /** @type {?} */\n    EntityMapOneStr.prototype.id;\n    /** @type {?} */\n    EntityMapOneStr.prototype.map;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityState() { }\nif (false) {\n    /** @type {?} */\n    EntityState.prototype.ids;\n    /** @type {?} */\n    EntityState.prototype.entities;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityDefinition() { }\nif (false) {\n    /** @type {?} */\n    EntityDefinition.prototype.selectId;\n    /** @type {?} */\n    EntityDefinition.prototype.sortComparer;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityStateAdapter() { }\nif (false) {\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addMany = function (entities, state) { };\n    /**\n     * @deprecated addAll has been renamed. Use setAll instead.\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} predicate\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (predicate, state) { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeAll = function (state) { };\n    /**\n     * @template S\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateOne = function (update, state) { };\n    /**\n     * @template S\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateMany = function (updates, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertMany = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.mapOne = function (map, state) { };\n    /**\n     * @template S\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.map = function (map, state) { };\n}\n/**\n * @record\n * @template T, V\n */\nfunction EntitySelectors() { }\nif (false) {\n    /** @type {?} */\n    EntitySelectors.prototype.selectIds;\n    /** @type {?} */\n    EntitySelectors.prototype.selectEntities;\n    /** @type {?} */\n    EntitySelectors.prototype.selectAll;\n    /** @type {?} */\n    EntitySelectors.prototype.selectTotal;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityAdapter() { }\nif (false) {\n    /** @type {?} */\n    EntityAdapter.prototype.selectId;\n    /** @type {?} */\n    EntityAdapter.prototype.sortComparer;\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function () { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function (state) { };\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function () { };\n    /**\n     * @template V\n     * @param {?} selectState\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function (selectState) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngrx-entity.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Dictionary, createEntityAdapter };\n\n//# sourceMappingURL=ngrx-entity.js.map","import { environment } from \"src/environments/environment.prod\";\r\n\r\nexport class AdminConfig {\r\n  // An Example | Delete The Content When Started\r\n  // source api\r\n  public static sourceAPI                   = environment.sourceApi;\r\n  // public static sourceAPI                   = 'http://localhost:8000/';\r\n\r\n  // All Application Api\r\n  public static loginAPI                    = AdminConfig.sourceAPI + 'login_check';\r\n  public static userAPI                     = AdminConfig.sourceAPI + 'user';\r\n\r\n  // Products\r\n  public static productsAPI                 = AdminConfig.sourceAPI + 'allproperties';\r\n\r\n  // Real Estate\r\n  public static allRealEstateAPI            = AdminConfig.sourceAPI + 'allRealEstate';\r\n  public static getRealEstateAPI            = AdminConfig.sourceAPI + 'realEstate';\r\n  public static deleteRealEstateAPI         = AdminConfig.sourceAPI + 'realEstate';\r\n\r\n  // Cars\r\n  public static allCarsAPI                  = AdminConfig.sourceAPI + 'allCars';\r\n  public static getCarAPI                   = AdminConfig.sourceAPI + 'car';\r\n  public static deleteCarAPI                = AdminConfig.sourceAPI + 'cars';\r\n\r\n  // Devices\r\n  public static allDevicesAPI               = AdminConfig.sourceAPI + 'allDevices';\r\n  public static getDeviceAPI                = AdminConfig.sourceAPI + 'device';\r\n  public static deleteDeviceAPI             = AdminConfig.sourceAPI + 'devices';\r\n\r\n  // Reports\r\n  public static reportsAPI                  = AdminConfig.sourceAPI + 'reports';\r\n  public static reportAPI                   = AdminConfig.sourceAPI + 'report';\r\n  public static deleteReportAPI             = AdminConfig.sourceAPI + 'deletereport';\r\n\r\n  // Chats\r\n  public static chatsAPI                    = AdminConfig.sourceAPI + 'getallchat';\r\n\r\n  // Statistics\r\n  public static statisticsAPI               = AdminConfig.sourceAPI + 'statistics';\r\n  \r\n  // Services\r\n  public static allServicesAPI              = AdminConfig.sourceAPI + 'allservices';\r\n  public static servicesAPI                 = AdminConfig.sourceAPI + 'services';\r\n  \r\n  // Categories\r\n  public static categoriesAPI                = AdminConfig.sourceAPI + 'categories';\r\n  public static categoryAPI                  = AdminConfig.sourceAPI + 'category';\r\n\r\n\r\n  // Upload\r\n  public static generalUploadAPI            = AdminConfig.sourceAPI + 'uploadfile';\r\n}\r\n"],"sourceRoot":"webpack:///"}