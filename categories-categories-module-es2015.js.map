{"version":3,"sources":["./src/app/pages/categories/categories-routing.module.ts","./src/app/pages/categories/categories.module.ts","./src/app/pages/categories/components/add-category/add-category.component.ts","./src/app/pages/categories/components/add-category/add-category.component.html","./src/app/pages/categories/components/all-categories/all-categories.component.ts","./src/app/pages/categories/components/all-categories/all-categories.component.html","./src/app/pages/categories/components/update-category/update-category.component.ts","./src/app/pages/categories/components/update-category/update-category.component.html","./src/app/pages/categories/services/categories.service.ts","./src/app/pages/categories/store/category.actions.ts","./src/app/pages/categories/store/category.effects.ts","./src/app/pages/categories/store/category.reducer.ts","./src/app/pages/categories/store/category.selector.ts"],"names":[],"mappings":"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","file":"categories-categories-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddCategoryComponent } from './components/add-category/add-category.component';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { UpdateCategoryComponent } from './components/update-category/update-category.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllCategoriesComponent },\n  { path: 'add', component: AddCategoryComponent },\n  { path: ':id', component: UpdateCategoryComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CategoriesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CategoriesRoutingModule } from './categories-routing.module';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { AddCategoryComponent } from './components/add-category/add-category.component';\nimport { UpdateCategoryComponent } from './components/update-category/update-category.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromCategory from './store/category.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { CategoryEffects } from './store/category.effects';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\n\n\n@NgModule({\n  declarations: [AllCategoriesComponent, AddCategoryComponent, UpdateCategoryComponent],\n  imports: [\n    ThemeModule,\n    CategoriesRoutingModule,\n    StoreModule.forFeature(fromCategory.categoriesFeatureKey, fromCategory.reducer),\n    EffectsModule.forFeature([CategoryEffects])\n  ]\n})\nexport class CategoriesModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Category } from '../../model/category.model';\nimport * as categoryActions from '../../store/category.actions';\nimport { CategoryState } from '../../store/category.reducer';\n\n@Component({\n  selector: 'app-add-category',\n  templateUrl: './add-category.component.html',\n  styleUrls: ['./add-category.component.scss']\n})\nexport class AddCategoryComponent implements OnInit {\n\n  addCategoryForm: FormGroup;\n\n  constructor(private store: Store<CategoryState>,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    this.addCategoryForm = new FormGroup({\n      lang: new FormControl('', Validators.required),\n      name: new FormControl('', Validators.required),\n      description: new FormControl(''),\n    });\n  }\n\n  onSubmit() {\n    if (!this.addCategoryForm.valid) {\n      this.toaster.error('Form not valid, please try again');\n      return;\n    } else {\n      const formObject = this.addCategoryForm.getRawValue();\n      console.log(formObject);\n      this.store.dispatch(categoryActions.addCategory({category: formObject}));\n    }\n  }\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid mb-5\">\n    <div class=\"content-header mt-5 mb-4 text-center\">\n        <h1>{{'new-category' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header\">\n            <h3 class=\"card-title\">{{'add-new-category' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addCategoryForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'lang' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"lang\"\n                            formControlName=\"lang\">\n                        <option value=\"\">{{'select-lang-placeholder' | translate}}</option>\n                        <option value=\"en\">{{'english' | translate}}</option>\n                        <option value=\"ar\">{{'arabic' | translate}}</option>\n                        <option value=\"tr\">{{'turkish' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('lang').errors?.required\">{{'lang-field-is-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('name').errors &&\n                           (addCategoryForm.get('name').touched || addCategoryForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('name').errors?.required\">{{'name-field-is-required' | translate}}</span>                      \n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('description').errors &&\n                           (addCategoryForm.get('description').touched || addCategoryForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('description').errors?.required\">{{'descriptioon-field-is-required' | translate}}</span>\n                </div>\n\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"addCategoryForm.invalid\">{{'create' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Category } from '../../model/category.model';\nimport * as categoryActions from '../../store/category.actions';\nimport { CategoryState } from '../../store/category.reducer';\nimport { categoriesErrorSelector, getAllCategoriesSelector } from '../../store/category.selector';\n\n@Component({\n  selector: 'app-all-categories',\n  templateUrl: './all-categories.component.html',\n  styleUrls: ['./all-categories.component.scss']\n})\nexport class AllCategoriesComponent implements OnInit {\n  categories: Category[];\n  categoriesList: Category[] = [];\n  error$: Observable<string>;\n  isDeleted = false;\n  config: any;                                          // Config Variable For Pagination Configuration\n  name: string;\n\n  constructor(private store: Store<CategoryState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(categoryActions.loadCategories());\n    this.getCategories();\n    \n    this.store.select(categoriesErrorSelector).subscribe(\n      error => console.log('error', error)\n    );\n  }\n\n  getCategories() {\n    this.store.select(getAllCategoriesSelector).subscribe(\n      data => {\n        if (data) {\n          this.categories = data;\n          this.categoriesList = data;\n\n          this.config = {\n            itemsPerPage: 5,\n            currentPage: 1,\n            totalItems: this.categoriesList.length\n          };\n        }\n      }\n    );\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  // Delete The Category\n  delete(categoryId: string) {\n    if (confirm('Are You Sure You Want To Delete This Category')) {\n      this.store.dispatch(categoryActions.deleteCategory({id: categoryId}));\n    }\n  }\n\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.categoriesList = [...this.categories];\n    } else {\n      this.categoriesList = [];\n      this.categoriesList = this.categories.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            // display the Name Column\n            return name;\n          }\n        }\n        if (res.description) {\n          const description = res.description.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (description) {\n            // display the Name Column\n            return description;\n          }\n        }\n      });\n    }\n  }\n\n}\n","<div *ngIf=\"categories != null\">\n    <div *ngIf=\"categories.length !== 0\">\n      <!-- <div class=\"container-fluid\"> -->\n        <h1 class=\"text-center details-title my-4\">{{'manage-categories-page' | translate}}</h1>\n          <div class=\"row\">\n              <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n                  <div class=\"form-group mb-4\">\n                      <input\n                        id=\"exampleFormControlInput2\"\n                        [(ngModel)]=\"name\"\n                        (keyup)=\"applyFilter()\"\n                        type=\"text\"\n                        placeholder=\"{{'category-search-input' | translate}}\"\n                        title=\"{{'category-search-input' | translate}}\"\n                        class=\"form-control form-control-underlined border-primary search-input\">\n                  </div>\n              </div>\n              <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n                <!-- <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/categories/add\">\n                  <i class=\"fa fa-plus\"></i>\n                  {{'add-new-car' | translate}}\n                </a> -->\n              </div>\n          </div>\n        <div class=\"table-responsive text-center\">\n            <table class=\"table table-bordered main-table\">\n                <tr class=\"bg-dark text-white\">\n                    <td>{{'name' | translate}}</td>\n                    <td>{{'description' | translate}}</td>\n                    <td>{{'control' | translate}}</td>\n                </tr>\n                <tr *ngFor=\"let category of categoriesList | paginate: config\">\n                  <td>{{category?.name ? category?.name : '-'}}</td>\n                  <td class=\"td-custom\">{{category?.description ? category?.description : '-'}}</td>                \n                  <td>\n                      <a routerLink=\"/categories/{{category?.id}}\" class=\"btn btn-success btn-sm mr-1 mb-1\">\n                        {{'update' | translate}}\n                    </a>\n                    <a (click)=\"delete(category?.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1\">\n                        {{'delete' | translate}}\n                      </a>\n                  </td>\n                </tr>\n            </table>\n            <pagination-controls class=\"my-pagination\"\n                                 (pageChange)=\"pageChanged($event)\"\n                                 autoHide=\"true\"\n                                 maxSize=\"5\"\n                                 responsive=\"true\"\n                                 previousLabel=\"{{'prev' | translate}}\"\n                                 nextLabel=\"{{'next' | translate}}\"\n                                 screenReaderPaginationLabel=\"Pagination\"\n                                 screenReaderPageLabel=\"page\"\n                                 screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n            </pagination-controls>\n        </div>\n      <!-- </div> -->\n    </div>\n    <!-- <div *ngIf=\"categoriesFilterList.length === 0\">\n        <div class=\"container\">\n            <div class=\"alert alert-primary text-center mt-5\">{{'categories-not-found' | translate}}</div>\n            <a routerLink=\"/categories/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n                <i class=\"fa fa-plus\"></i>\n                {{'add-new-category' | translate}}\n            </a>\n        </div>\n    </div> -->\n</div>\n<div *ngIf=\"categories.length === 0\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { CategoryState } from '../../store/category.reducer';\nimport * as categoryActions from '../../store/category.actions';\nimport { ActivatedRoute } from '@angular/router';\nimport { getCategorySelector } from '../../store/category.selector';\nimport { Category } from '../../model/category.model';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-update-category',\n  templateUrl: './update-category.component.html',\n  styleUrls: ['./update-category.component.scss']\n})\nexport class UpdateCategoryComponent implements OnInit {\n  categoryData: Category;\n  addCategoryForm: FormGroup;\n\n  constructor(private store: Store<CategoryState>,\n              private activatedRouter: ActivatedRoute,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    this.activatedRouter.paramMap.subscribe(params => {      \n      this.store.dispatch(categoryActions.loadCategory({id: params.get('id')}));\n    });\n    this.addCategoryForm = new FormGroup({\n      lang: new FormControl('', Validators.required),\n      name: new FormControl('', Validators.required),\n      description: new FormControl(''),\n    });\n    this.getCategory();\n  }\n\n  getCategory() {\n    this.store.select(getCategorySelector).subscribe(\n      data => {\n        if (data) {\n          this.fillForm(data);\n        }\n      }\n    );\n  }\n\n  fillForm(data: Category) {\n    this.addCategoryForm = new FormGroup({\n      id: new FormControl(data.id),\n      lang: new FormControl(data.lang, Validators.required),\n      name: new FormControl(data.name, Validators.required),\n      description: new FormControl(data.description),\n    });\n  }\n\n  onSubmit() {\n    if (!this.addCategoryForm.valid) {\n      this.toaster.error('Form not valid, please try again');\n      return;\n    } else {\n      const formObject = this.addCategoryForm.getRawValue();\n      console.log(formObject);\n      this.store.dispatch(categoryActions.updateCategory({category: formObject}));\n    }\n  }\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid mb-5\">\n    <div class=\"content-header mt-5 mb-4 text-center\">\n        <h1>{{'update-category' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header\">\n            <!-- <h3 class=\"card-title\">{{'add-new-category' | translate}}</h3> -->\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addCategoryForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'lang' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"lang\"\n                            formControlName=\"lang\">\n                        <option value=\"\">{{'select-lang-placeholder' | translate}}</option>\n                        <option value=\"en\">{{'english' | translate}}</option>\n                        <option value=\"ar\">{{'arabic' | translate}}</option>\n                        <option value=\"tr\">{{'turkish' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('lang').errors?.required\">{{'lang-field-is-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('name').errors &&\n                           (addCategoryForm.get('name').touched || addCategoryForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('name').errors?.required\">{{'name-field-is-required' | translate}}</span>                      \n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addCategoryForm.get('description').errors &&\n                           (addCategoryForm.get('description').touched || addCategoryForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addCategoryForm.get('description').errors?.required\">{{'descriptioon-field-is-required' | translate}}</span>\n                </div>\n\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"addCategoryForm.invalid\">{{'update' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AdminConfig } from '../../AdminConfig';\nimport { CategoriesResponse } from '../model/categories-response';\nimport { CategoryResponse } from '../model/category-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoriesService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getCategories(): Observable<CategoriesResponse> {\n    return this.httpClient.get<CategoriesResponse>(AdminConfig.categoriesAPI);\n  }\n  \n  getCategory(categoryId: string): Observable<CategoryResponse> {\n    return this.httpClient.get<CategoryResponse>(`${AdminConfig.categoryAPI}/${categoryId}`);\n  }\n \n  newCategory(data): Observable<CategoryResponse> {\n    return this.httpClient.post<CategoryResponse>(AdminConfig.categoryAPI, JSON.stringify(data));\n  }\n  \n  updateCategory(data): Observable<any> {\n    return this.httpClient.put<any>(AdminConfig.categoryAPI, JSON.stringify(data));\n  }\n\n  deleteCategory(categoryId: string): Observable<any> {\n    return this.httpClient.delete<any>(`${AdminConfig.categoryAPI}/${categoryId}`);\n  }\n}","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Category } from '../model/category.model';\n\nexport const loadCategories = createAction(\n  '[Category/API] Load Categories'\n);\n\nexport const loadCategoriesSuccess = createAction(\n  '[Category/API] Load Categories Success', \n  props<{ Data: Category[] }>()\n);\n\nexport const loadCategoriesFailure = createAction(\n  '[Category/API] Load Categories Failure', \n  props<{ error: string }>()\n);\n\nexport const loadCategory = createAction(\n  '[Category/API] Load Category',\n  props<{ id: string }>()\n);\n\nexport const loadCategorySuccess = createAction(\n  '[Category/API] Load Category Success', \n  props<{ Data: Category }>()\n);\n\nexport const loadCategoryFailure = createAction(\n  '[Category/API] Load Category Failure', \n  props<{ error: string }>()\n);\n\nexport const addCategory = createAction(\n  '[Category/API] Add Category',\n  props<{ category: Category }>()\n);\n\nexport const addCategorySuccess = createAction(\n  '[Category/API] Add Category Success'\n);\n\nexport const addCategoryFailure = createAction(\n  '[Category/API] Add Category Failure',\n  props<{ error: string }>()\n);\n\nexport const deleteCategory = createAction(\n  '[Category/API] Delete Category',\n  props<{ id: string }>()\n);\n\nexport const deleteCategorySuccess = createAction(\n  '[Category/API] Delete Category Success',\n  props<{ id: string }>()\n);\n\nexport const deleteCategoryFailure = createAction(\n  '[Category/API] Delete Category Failure',\n  props<{ error: string }>()\n);\n\nexport const updateCategory = createAction(\n  '[Category/API] Update Category',\n  props<{ category: Category }>()\n);\n\nexport const updateCategorySuccess = createAction(\n  '[Category/API] Update Category Success',\n  props<{ category: Update<Category> }>()\n);\n\nexport const updateCategoryFailure = createAction(\n  '[Category/API] Update Category Failure',\n  props<{ error: string }>()\n);\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { act, Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Update } from '@ngrx/entity';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, switchMap } from 'rxjs/operators';\nimport { Category } from '../model/category.model';\nimport { CategoriesService } from '../services/categories.service';\nimport * as categoryActions from './category.actions';\n\n\n@Injectable()\nexport class CategoryEffects {\n\n  constructor(private actions$: Actions,\n              private categoryService: CategoriesService,\n              private toaster: ToastrService,\n              private router: Router) {}\n\n  loadCategories$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.loadCategories),\n    switchMap(() => this.categoryService.getCategories()\n      .pipe(\n        map(response => {\n          // console.log('effect load all :', response);\n          return categoryActions.loadCategoriesSuccess(response);\n        }),\n        catchError(error => of(categoryActions.loadCategoriesFailure({error})))\n      ))\n  ));\n\n  \n  loadCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.loadCategory),\n    switchMap(action => this.categoryService.getCategory(action.id)\n      .pipe(\n        map(response => {\n          // console.log('effect load one :', response);\n          return categoryActions.loadCategorySuccess(response);\n        }),\n        catchError(error => of(categoryActions.loadCategoryFailure({error})))\n      ))\n  ));\n\n\n  newCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.addCategory),\n    exhaustMap(action => this.categoryService.newCategory(action.category)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response.msg);\n          return categoryActions.addCategorySuccess();\n        }),\n        catchError(error => {\n          console.log('add error : ', error);\n          return of(categoryActions.addCategoryFailure({error}));\n        })\n      ))\n  ));\n\n  \n  updateCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.updateCategory),\n    exhaustMap(action => this.categoryService.updateCategory(action.category)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response.msg);\n          const updateCategory: Update<Category> = {\n            id: action.category.id,\n            changes: {\n              ...action.category\n            }\n          };\n          return categoryActions.updateCategorySuccess({category: updateCategory});\n        }),\n        catchError(error => {\n          console.log('update error : ', error);\n          return of(categoryActions.updateCategoryFailure({error}));\n        })\n      ))\n  ));\n\n\n  redirectAfterAddCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(...[categoryActions.addCategorySuccess, categoryActions.updateCategorySuccess]),\n    map(() => this.router.navigate(['categories']))\n  ), { dispatch: false });\n\n\n  deleteCategory$ = createEffect(() => this.actions$.pipe(\n    ofType(categoryActions.deleteCategory),\n    exhaustMap(action => this.categoryService.deleteCategory(action.id)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response.msg);\n          return categoryActions.deleteCategorySuccess({id: action.id});\n        }),\n        catchError(error => {\n          console.log('delete error : ', error);\n          return of(categoryActions.deleteCategoryFailure({error}));\n        })\n      ))\n  ));\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Category } from '../model/category.model';\nimport * as CategoryActions from './category.actions';\n\nexport const categoriesFeatureKey = 'categories';\n\nexport interface CategoryState extends EntityState<Category> {\n  // additional entities state properties\n  Data: Category[];\n  category: Category;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Category> = createEntityAdapter<Category>();\n\nexport const initialState: CategoryState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  category: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(CategoryActions.loadCategoriesSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(CategoryActions.loadCategoriesFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.loadCategorySuccess,\n    (state, action) => {\n      return {\n        ...state,\n        category: action.Data\n      };\n    }\n  ),\n  on(CategoryActions.loadCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.addCategory,\n    (state, action) => adapter.addOne(action.category, state)\n  ),\n  on(CategoryActions.addCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.deleteCategorySuccess,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(CategoryActions.deleteCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(CategoryActions.updateCategorySuccess,\n    (state, action) => adapter.updateOne(action.category, state)\n  ),\n  on(CategoryActions.updateCategoryFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { categoriesFeatureKey, CategoryState, selectAll } from \"./category.reducer\";\r\n\r\nconst categoriesFeatureState = createFeatureSelector(categoriesFeatureKey);\r\n\r\nexport const getAllCategoriesSelector = createSelector(categoriesFeatureState, selectAll);\r\n\r\nexport const getCategorySelector = createSelector(categoriesFeatureState, (state: CategoryState) => state.category);\r\n\r\nexport const categoriesErrorSelector = createSelector(categoriesFeatureState, (state: CategoryState) => state.error);"],"sourceRoot":"webpack:///"}